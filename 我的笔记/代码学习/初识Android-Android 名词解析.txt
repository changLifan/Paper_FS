API:接口
IPC:进程间通信(Interprosses communication)
GM Confidential information：通用汽车公司机密信息
ProAudio:专业音响
Native Component:本地组件



-----------------------------我是个 分隔符-----------------------------1
Android 源代码:
       Android 是一个针对多种不同设备类型打造的开放源代码软件堆栈。Android 的主要目的是为运营商、原始设备制造商 (OEM) 和开发者创造一个开放的软件平台;
       Android 平台不存在一个集中瓶颈（意即没有任何行业参与者可一手限制或控制其他参与者的创新）。
       Android 兼容性定义文档 (CDD)

Android 8.0 中引入的 HIDL 格式。
       HAL 接口定义语言（简称 HIDL，发音为“hide-l”）: 是用于指定 HAL 和其用户之间的接口的一种接口描述语言 (IDL)。HIDL 允许指定类型和方法调用（会汇集到接口和软件包中）。从更广泛的意义上来说，HIDL 是用于在可以独立编译的代码库之间进行通信的系统。
       HIDL 旨在用于进程间通信 (IPC)。
       HIDL 支持两种 数据传输方法：共享内存和快速消息队列 (FMQ)。
       HIDL 语法:HIDL 语言与 C 语言类似
	      /** */ 表示文档注释。
	      /* */ 表示多行注释
	      // 表示注释一直持续到行结束。
	[empty] 表示该字词可能为空。
	      ? 跟在文本或字词后，表示它是可选的
	      ... 表示包含零个或多个项、用指定的分隔符号分隔的序列。HIDL 中不含可变参数。
	      逗号用于分隔序列元素。
	      分号用于终止各个元素，包括最后的元素。
	      大写字母是非终止符。
	italics 是一个令牌系列，例如 integer 或 identifier（标准 C 解析规则）。
	constexpr 是 C 样式的常量表达式（如 1 + 1 和 1L << 3）。
	import_name 是软件包或接口名称，按 HIDL 版本编号中所述的方式加以限定。
	小写 words 是文本令牌。

异步回调： 由 HAL 用户提供、传递给 HAL（通过 HIDL 方法）并由 HAL 调用以随时返回数据的接口。
同步回调： 将数据从服务器的 HIDL 方法实现返回到客户端。不用于返回无效值或单个原始值的方法。
客户端：   调用特定接口的方法的进程。HAL 进程或框架进程可以是一个接口的客户端和另一个接口的服务器。另请参阅“直通式”。
接口	   方法和类型的集合。会转换为 C++ 或 Java 中的类。接口中的所有方法均按同一方向调用：客户端进程会调用由服务器进程实现的方法。 
Binder 化： 表示 HIDL 用于进程之间的远程过程调用，并通过类似 Binder 的机制来实现。另请参阅“直通式”。
直通式	    HIDL 的一种模式，使用这种模式时，服务器是共享库，由客户端进行 dlopen 处理。在直通模式下，客户端和服务器是相同的进程，但代码库不同。此模式仅用于将旧版代码库并入 HIDL 模型。另请参阅“Binder 化”。
服务器	    实现接口的方法的进程 


-----------------------------我是一个分隔符-----------------------------2--
Android 开源项目 (AOSP)
HAL： 硬件抽象层



-----------------------------我是一个分隔符-----------------------------3--
音频

设备间互连： 设备间互连技术用于将各设备的音频和视频组件连接起来，
蓝牙： 近距离无线技术。
DisplayPort： 视频电子标准协会 (VESA) 制订的数字显示接口。
HDMI： 高清晰度多媒体接口，用于传输音频和视频数据。移动设备上会使用微型 HDMI（D 型）或 MHL 连接器。
IEEE 1394： （也称为 FireWire）是一种用于实时低延迟应用（如音频）的串行总线。
Intel HDA： Intel 高清晰度音频，一种前面板连接器规范。
ADC： 模拟转数字转换器。用于将模拟信号 转换为数字信号 的模块。
DAC： 数字转模拟转换器，用于将数字信号 转换为模拟信号 的模块。
ALSA： 高级 Linux 声音体系。
AudioEffect： 用于输出（处理后）音效与输入（处理前）音效的 API 和实现框架。
AudioFlinger： Android 声音服务器实现用例。
AudioMixer： AudioFlinger 中的模块，负责合并多个音轨以及应用衰减（音量）和音效。
AudioRecord： 用于从麦克风等音频输入设备接收数据的主要低级别客户端 API。
音频来源： 一个常量枚举，用于为捕获音频输入指明目标使用情形。
AudioTrack： 用于向音响设备等音频输出设备发送数据的主要低级别客户端 API。
HAL： 硬件抽象层
FastCapture: AudioFlinger 中的线程。经配置，它会向延迟时间较短的 fast track 发送音频数据，并驱动输入设备的运行，以缩短延迟时间。
FastMixer: AudioFlinger 中的线程。经配置，它会从延迟时间较短的 fast track 接收并混合音频数据，同时驱动主要输出设备的运行，以缩短延迟时间。
fast track: 部分设备和路由中具有较短延迟时间但功能较少的 AudioTrack 或 AudioRecord 客户端。
MediaPlayer: 比 AudioTrack 级别更高的客户端 API，播放已编码的内容或包含多媒体音频和视频轨道的内容。
StateQueue: AudioFlinger 中的模块，负责同步线程之间的状态。NBAIO 用于传递数据，而 StateQueue 用于传递控制信息。



-----------------------------我是一个分隔符-----------------------------4--
音频实现
           如何实现音频硬件抽象层（HAL）,提供了有关配置音频（文件格式，代码组织，预处理效果）的详细信息，说明如何配置共享库（创建Android.mk文件）。
实现音频HAL：
       两个接口：（必须实现所有的接口）
       音频设备的主函数：hardware/libhardware/include/hardware/audio.h
       应用音频效果：hardware/libhardware/include/hardware/audio_effect.h
       除了实现音频HAL之外，必须创建音频策略配置文件，描述音频拓扑。并将HAL实现，打包到共享库中，配置预处理效果。

配置音频政策
       XML(文件格式)：描述音频拓扑
文件格式和位置：
	音频配置文件是audio_policy_configuration.xml，位于/system/etc
显示音频政策例子：
	顶层模块包含各个音频HAL硬件模块对应的模块：
		混合端口：在音频HAL处打开以供播放的和捕获的流的配置文件
		设备端口：附上其他类型的设备
		导向：支持从设备到设备，从流到设备的导向
文件包含
       XML: 包含方法可用于包含位于其他XML文件中的音频政策配置信息
	      文件只能包含顶层元素；
	      文件不能包含Xinclude元素。	
  使用“包含”可避免将标准 Android 开放源代码项目 (AOSP) 音频 HAL 模块配置信息复制到所有音频政策配置文件（这样做容易出错）

配置共享库
创建音频政策配置后，先将HAL实现打包到共享库，并将其复制到相应的位置：
	1.创建一个目录（device/<company>/<device>/audio）去包含自己的库的源文件；
	2.创建一个Android.mk 文件来编译共享库，您的库必须命名为 audio.primary.<device>.so，以便 Android 可以正确加载库。
	3.如果支持低延迟音频，请将对应的XML功能文件复制到产品中；
	4.将您之前创建的音频政策配置文件复制到您产品的Makefile 的 system/etc/ 目录下。
	5. Makefile 中声明您的产品所需的音频 HAL 的共享模块

-----------------------------我是一个分隔符-----------------------------5--

配置预处理效果
Android 平台向 audiofx 软件包（可供开发者访问）中支持的设备提供音频效果。例如，Nexus 10 支持以下预处理效果：
	回声消除
	自动增益控制
	噪音抑制


-----------------------------我是一个分隔符-----------------------------6--

数据格式
       Android内部使用很多数据格式，并在公共API，文件格式和硬件抽象层（HAL）中公布了一部分。
属性：
       压缩：未压缩、无损压缩或有损压缩。
       表示法： 定点数或浮点数
       定点数是未压缩 PCM 音频数据的最常见表示法，特别是对于硬件接口。
       定点数在小数点前后具有固定（恒定）位数。我们所有的表示法都使用基数 2，所以我们用“位”代替“位数”，用“二进制点”或简单的“点”代替“小数点”。点左边的位是整数部分，点右边的位是小数部分。
       用 Q 标记：Qm.n 表示 m 个整数位，n 个小数位。“Q”计为一位， 总位数为 m + n + 1。
	          Um.n 用于无符号数：m 个整数位和 n 个小数位，并且“U”计为零位。总位数为 m + n。
       浮点数表示法： 浮点数是定点数的替代，其中点的位置可以变化。

转换： 各种表示法之间的数据转换
浮点数转换： 将值从 Qm.n 格式转换为浮点数：
		1. 将值转换为浮点数，就像它是一个整数（通过忽略该点）。
    		2. 乘以 （2的-n次方）。
		例如，要将 Q4.27 内部值转换为浮点数（float = integer * (2 ^ -27)）
定点数转换： 不同 Qm.n 格式之间的转换会遵循以下规则：
		1.当 m 增加时，用符号扩展左边的整数部分。
		2.当 m 减小时，限制整数部分。
		3.当 n 增加时，用零扩展右边的小数部分。
		4.当 n 减少时，抖动、舍入或截断右侧的多余小数位。



-----------------------------我是一个分隔符-----------------------------音频属性--

AudioAttributes {
    mUsage
    mContentType
    mSource
    mFlags
    mTags / mFormattedTags / mBundle    (key value pairs)
}

	用法：指定播放来源的原因，并控制导向、焦点和音量决策。
	内容类型：指定播放来源的类型（音乐、电影、语音、发音、未知）。
	上下文：提取到 Audio HAL 的用法值。
	标记：指定来源的播放方式

-----------------------------我是一个分隔符-----------------------------AAudio 和 MMAP--
AAudio 和 MMAP
       AAudio 提供了一个低延迟数据路径。在“专有”模式下，该功能可让客户端应用代码直接写入到与 ALSA 驱动程序共享的内存映射缓冲区。在“共享”模式下，MMAP 缓冲区由在 AudioServer 中运行的混音器使用。在“专有”模式下，由于数据会绕过混音器，延迟时间会明显缩短。


-----------------------------我是一个分隔符-----------------------------音频延迟测量--

延迟时间的一个重要指标是往返延迟时间
       设备上的往返音频延迟时间：T(output) - T(input)


-----------------------------我是一个分隔符-----------------------------优先级倒置--

为了缩短延迟时间，采用预测性更高的调度策略将CPU资源分配给对时间要求严格的线程。
       可靠的调度可以减少缓冲区的大小和数目。同时仍可避免欠载和溢出。
优先级倒置：实时系统的一种典型故障，优先级较高的任务会因为等待优先级较低的任务释放互斥等资源而无限时受阻。
变现为音频错误和音频重复。
解决方法：停用中断和优先级继承互斥
Android 使用的技术：原子操作：递增、按位“或”、按位“与”
	针对数据使用非阻塞单读取器单写入器 FIFO 队列。
	在高优先级和低优先级模块之间尝试“复制”状态而非“共享”状态。
	如果确实需要共享状态，请将状态的大小上限设为一个字，在不重试的情况下，可以在单个总线操作中通过原子方式访问该状态。
	对于复杂的多字状态，请使用状态队列。状态队列基本上只是用于状态（而非数据）的非阻塞单读取器单写入器 FIFO 队列，写入器将相邻推送收成单个推送这一情况除外。
	注意内存屏障，以保证 SMP 的准确性。
	信任，但要验证。在进程之间共享“状态”时，请勿假定状态的格式正确无误。例如，检查索引是否在范围内。在同一个进程中的线程之间，以及在相互信任的进程（通常具有相同的 UID）之间，不需要进行验证。此外，也无需验证共享的“数据”，例如出现非继发性损坏的 PCM 音频。



-----------------------------我是一个分隔符-----------------------------优先级倒置--
采样率转换： 采样率转换术语涉及从一种采样率转换为另一种采样率的过程。（重新采样）
采样率转换： 是将具有某一采样率的离散样本流更改为具有另一采样率的流的过程。


-----------------------------我是一个分隔符-----------------------------MIDI--

